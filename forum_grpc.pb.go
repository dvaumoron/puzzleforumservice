// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: forum.proto

package puzzleforumservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ForumClient is the client API for Forum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumClient interface {
	CreateThread(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Confirm, error)
	CreateMessage(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Confirm, error)
	GetThread(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Content, error)
	GetThreads(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Contents, error)
	GetMessages(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Contents, error)
	DeleteThread(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Confirm, error)
	DeleteMessage(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Confirm, error)
}

type forumClient struct {
	cc grpc.ClientConnInterface
}

func NewForumClient(cc grpc.ClientConnInterface) ForumClient {
	return &forumClient{cc}
}

func (c *forumClient) CreateThread(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) CreateMessage(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetThread(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetThreads(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/GetThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) GetMessages(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Contents, error) {
	out := new(Contents)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeleteThread(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/DeleteThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumClient) DeleteMessage(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Confirm, error) {
	out := new(Confirm)
	err := c.cc.Invoke(ctx, "/puzzleforumservice.Forum/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServer is the server API for Forum service.
// All implementations must embed UnimplementedForumServer
// for forward compatibility
type ForumServer interface {
	CreateThread(context.Context, *CreateRequest) (*Confirm, error)
	CreateMessage(context.Context, *CreateRequest) (*Confirm, error)
	GetThread(context.Context, *IdRequest) (*Content, error)
	GetThreads(context.Context, *SearchRequest) (*Contents, error)
	GetMessages(context.Context, *SearchRequest) (*Contents, error)
	DeleteThread(context.Context, *IdRequest) (*Confirm, error)
	DeleteMessage(context.Context, *IdRequest) (*Confirm, error)
	mustEmbedUnimplementedForumServer()
}

// UnimplementedForumServer must be embedded to have forward compatible implementations.
type UnimplementedForumServer struct {
}

func (UnimplementedForumServer) CreateThread(context.Context, *CreateRequest) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedForumServer) CreateMessage(context.Context, *CreateRequest) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedForumServer) GetThread(context.Context, *IdRequest) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedForumServer) GetThreads(context.Context, *SearchRequest) (*Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreads not implemented")
}
func (UnimplementedForumServer) GetMessages(context.Context, *SearchRequest) (*Contents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedForumServer) DeleteThread(context.Context, *IdRequest) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedForumServer) DeleteMessage(context.Context, *IdRequest) (*Confirm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedForumServer) mustEmbedUnimplementedForumServer() {}

// UnsafeForumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServer will
// result in compilation errors.
type UnsafeForumServer interface {
	mustEmbedUnimplementedForumServer()
}

func RegisterForumServer(s grpc.ServiceRegistrar, srv ForumServer) {
	s.RegisterService(&Forum_ServiceDesc, srv)
}

func _Forum_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateThread(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).CreateMessage(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetThread(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/GetThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetThreads(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).GetMessages(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/DeleteThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeleteThread(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forum_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puzzleforumservice.Forum/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServer).DeleteMessage(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forum_ServiceDesc is the grpc.ServiceDesc for Forum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puzzleforumservice.Forum",
	HandlerType: (*ForumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _Forum_CreateThread_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Forum_CreateMessage_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _Forum_GetThread_Handler,
		},
		{
			MethodName: "GetThreads",
			Handler:    _Forum_GetThreads_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Forum_GetMessages_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _Forum_DeleteThread_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Forum_DeleteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forum.proto",
}
